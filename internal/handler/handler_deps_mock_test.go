// Code generated by MockGen. DO NOT EDIT.
// Source: handler_deps.go
//
// Generated by this command:
//
//	mockgen -build_flags=--mod=mod -package=handler -destination=handler_deps_mock_test.go -source=handler_deps.go
//

// Package handler is a generated GoMock package.
package handler

import (
	reflect "reflect"
	time "time"

	entities "github.com/cosmart/internal/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockusecaseInterface is a mock of usecaseInterface interface.
type MockusecaseInterface struct {
	ctrl     *gomock.Controller
	recorder *MockusecaseInterfaceMockRecorder
}

// MockusecaseInterfaceMockRecorder is the mock recorder for MockusecaseInterface.
type MockusecaseInterfaceMockRecorder struct {
	mock *MockusecaseInterface
}

// NewMockusecaseInterface creates a new mock instance.
func NewMockusecaseInterface(ctrl *gomock.Controller) *MockusecaseInterface {
	mock := &MockusecaseInterface{ctrl: ctrl}
	mock.recorder = &MockusecaseInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockusecaseInterface) EXPECT() *MockusecaseInterfaceMockRecorder {
	return m.recorder
}

// GetListOfBooks mocks base method.
func (m *MockusecaseInterface) GetListOfBooks(subject string) ([]entities.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListOfBooks", subject)
	ret0, _ := ret[0].([]entities.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListOfBooks indicates an expected call of GetListOfBooks.
func (mr *MockusecaseInterfaceMockRecorder) GetListOfBooks(subject any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListOfBooks", reflect.TypeOf((*MockusecaseInterface)(nil).GetListOfBooks), subject)
}

// SubmitBookPickupSchedule mocks base method.
func (m *MockusecaseInterface) SubmitBookPickupSchedule(edition string, pickupDate, returnDate time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitBookPickupSchedule", edition, pickupDate, returnDate)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubmitBookPickupSchedule indicates an expected call of SubmitBookPickupSchedule.
func (mr *MockusecaseInterfaceMockRecorder) SubmitBookPickupSchedule(edition, pickupDate, returnDate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitBookPickupSchedule", reflect.TypeOf((*MockusecaseInterface)(nil).SubmitBookPickupSchedule), edition, pickupDate, returnDate)
}
