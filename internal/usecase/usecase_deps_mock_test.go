// Code generated by MockGen. DO NOT EDIT.
// Source: usecase_deps.go
//
// Generated by this command:
//
//	mockgen -build_flags=--mod=mod -package=usecase -destination=usecase_deps_mock_test.go -source=usecase_deps.go
//

// Package usecase is a generated GoMock package.
package usecase

import (
	reflect "reflect"
	time "time"

	entities "github.com/cosmart/internal/entities"
	infrastructure "github.com/cosmart/internal/infrastructure"
	gomock "go.uber.org/mock/gomock"
)

// MockrepositoryInterface is a mock of repositoryInterface interface.
type MockrepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockrepositoryInterfaceMockRecorder
}

// MockrepositoryInterfaceMockRecorder is the mock recorder for MockrepositoryInterface.
type MockrepositoryInterfaceMockRecorder struct {
	mock *MockrepositoryInterface
}

// NewMockrepositoryInterface creates a new mock instance.
func NewMockrepositoryInterface(ctrl *gomock.Controller) *MockrepositoryInterface {
	mock := &MockrepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockrepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockrepositoryInterface) EXPECT() *MockrepositoryInterfaceMockRecorder {
	return m.recorder
}

// GetBooksBySubjectFromRepo mocks base method.
func (m *MockrepositoryInterface) GetBooksBySubjectFromRepo(subject string) ([]entities.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBooksBySubjectFromRepo", subject)
	ret0, _ := ret[0].([]entities.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBooksBySubjectFromRepo indicates an expected call of GetBooksBySubjectFromRepo.
func (mr *MockrepositoryInterfaceMockRecorder) GetBooksBySubjectFromRepo(subject any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBooksBySubjectFromRepo", reflect.TypeOf((*MockrepositoryInterface)(nil).GetBooksBySubjectFromRepo), subject)
}

// GetPickupSchedulesByEdition mocks base method.
func (m *MockrepositoryInterface) GetPickupSchedulesByEdition(edition string) infrastructure.ScheduleInformation {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPickupSchedulesByEdition", edition)
	ret0, _ := ret[0].(infrastructure.ScheduleInformation)
	return ret0
}

// GetPickupSchedulesByEdition indicates an expected call of GetPickupSchedulesByEdition.
func (mr *MockrepositoryInterfaceMockRecorder) GetPickupSchedulesByEdition(edition any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPickupSchedulesByEdition", reflect.TypeOf((*MockrepositoryInterface)(nil).GetPickupSchedulesByEdition), edition)
}

// GetWorkByEdition mocks base method.
func (m *MockrepositoryInterface) GetWorkByEdition(edition string) (entities.BookInformation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkByEdition", edition)
	ret0, _ := ret[0].(entities.BookInformation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkByEdition indicates an expected call of GetWorkByEdition.
func (mr *MockrepositoryInterfaceMockRecorder) GetWorkByEdition(edition any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkByEdition", reflect.TypeOf((*MockrepositoryInterface)(nil).GetWorkByEdition), edition)
}

// SetPickupSchedulesByEdition mocks base method.
func (m *MockrepositoryInterface) SetPickupSchedulesByEdition(edition string, pickupDate, returnDate time.Time, bookInfo entities.BookInformation) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPickupSchedulesByEdition", edition, pickupDate, returnDate, bookInfo)
}

// SetPickupSchedulesByEdition indicates an expected call of SetPickupSchedulesByEdition.
func (mr *MockrepositoryInterfaceMockRecorder) SetPickupSchedulesByEdition(edition, pickupDate, returnDate, bookInfo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPickupSchedulesByEdition", reflect.TypeOf((*MockrepositoryInterface)(nil).SetPickupSchedulesByEdition), edition, pickupDate, returnDate, bookInfo)
}
